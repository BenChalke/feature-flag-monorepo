service: feature-flags-backend
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-2

  # CORS for HTTP API
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
        - https://featureflag.benchalke.com
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PATCH
        - DELETE
        - OPTIONS
      allowCredentials: true

  environment:
    # existing tables
    DYNAMODB_FLAGS_TABLE:        !Ref FlagsTable
    DYNAMODB_COUNTERS_TABLE:     !Ref CountersTable
    DYNAMODB_CONNECTIONS_TABLE:  !Ref ConnectionsTable

    # new users table
    USERS_TABLE:                 !Ref UsersTable

    # your original websocket endpoint
    WEBSOCKET_ENDPOINT:          !Sub "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"

    # JWT config for auth
    JWT_SECRET:                  ${env:JWT_SECRET}
    JWT_EXPIRY:                  "1h"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt FlagsTable.Arn

        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt CountersTable.Arn

        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource:
            - !GetAtt ConnectionsTable.Arn

        # grant the auth lambdas read/write to your users table
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - !GetAtt UsersTable.Arn

        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - Fn::Sub: |
                arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*

functions:
  # ─── Flags CRUD ───────────────────────────────────────────────────────
  getFlags:
    handler: handlers/getFlags.handler
    events:
      - httpApi:
          path: /flags
          method: get

  createFlag:
    handler: handlers/createFlag.handler
    events:
      - httpApi:
          path: /flags
          method: post

  updateFlag:
    handler: handlers/updateFlag.handler
    events:
      - httpApi:
          path: /flags/{id}
          method: patch

  deleteFlag:
    handler: handlers/deleteFlag.handler
    events:
      - httpApi:
          path: /flags/{id}
          method: delete

  # ─── Bulk Actions ────────────────────────────────────────────────────
  bulkDeleteFlags:
    handler: handlers/bulkDeleteFlags.handler
    events:
      - httpApi:
          path: /flags/bulk-delete
          method: delete

  bulkUpdateFlags:
    handler: handlers/bulkUpdateFlags.handler
    events:
      - httpApi:
          path: /flags/bulk-update
          method: patch

  # ─── Auth Endpoints ────────────────────────────────────────────────────
  register:
    handler: handlers/auth/register.handler
    events:
      - httpApi:
          path: /auth/register
          method: post

  login:
    handler: handlers/auth/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: post

  me:
    handler: handlers/auth/me.handler
    events:
      - httpApi:
          path: /auth/me
          method: get

  # ─── WebSocket lifecycle ───────────────────────────────────────────────
  onConnect:
    handler: handlers/onConnect.handler
    events:
      - websocket:
          route: $connect

  onDisconnect:
    handler: handlers/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect

resources:
  Resources:
    FlagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CountersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: counterName
            AttributeType: S
        KeySchema:
          - AttributeName: counterName
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # new users table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    WebSocketApiEndpoint:
      Description: "WebSocket API endpoint URL"
      Value: !Sub "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
      Export:
        Name: WebSocketApiEndpoint
